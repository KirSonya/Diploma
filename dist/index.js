"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFormula = processFormula;
// index.ts
const tokenizer_1 = require("./tokenizer");
const parser_1 = require("./parser");
const translator_1 = require("./translator");
const chalk_1 = __importDefault(require("chalk")); // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
// –ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testFormulas = [
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ì–û–î) > 2017",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ö–í–ê–†–¢–ê–õ) <= 4",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ú–ï–°–Ø–¶) >= 1",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ù–ï–î–ï–õ–Ø) <= 1",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –î–ï–ù–¨) > 13",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ß–ê–°) < 1",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ú–ò–ù–£–¢–ê) <= 13",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –°–ï–ö–£–ù–î–ê) >= 1",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –î–ï–ù–¨–ù–ï–î–ï–õ–ò) <= 1",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –î–ï–ù–¨–ì–û–î–ê) > 56",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ì–û–î)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ö–í–ê–†–¢–ê–õ)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ú–ï–°–Ø–¶)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ù–ï–î–ï–õ–Ø)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –î–ï–ù–¨)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ß–ê–°)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ú–ò–ù–£–¢–ê)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –°–ï–ö–£–ù–î–ê)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –î–ï–ù–¨–ù–ï–î–ï–õ–ò)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –î–ï–ù–¨–ì–û–î–ê)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –ì–û–î, 1)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –ú–ï–°–Ø–¶, 1)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –î–ï–ù–¨, 1)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –ß–ê–°, 1)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –ú–ò–ù–£–¢–ê, 1)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –°–ï–ö–£–ù–î–ê, 1)",
];
// –í—ã–±–æ—Ä —è–∑—ã–∫–∞: 'ru' –∏–ª–∏ 'en'
const language = 'en';
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
function processFormula(formula, lang = 'en') {
    try {
        // 1. –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        const tokenizer = new tokenizer_1.Tokenizer(formula);
        const tokens = tokenizer.tokenize();
        // 2. –ü–∞—Ä—Å–∏–Ω–≥
        const parser = new parser_1.Parser(tokens);
        const ast = parser.parse();
        // 3. –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è
        const translator = new translator_1.Translator(lang);
        return translator.translate(ast);
    }
    catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—É–ª—ã: ${error instanceof Error ? error.message : String(error)}`);
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
const printSeparator = () => {
    console.log(chalk_1.default.gray('‚ïê'.repeat(60)));
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞
const printTestHeader = (index, formula) => {
    printSeparator();
    console.log(chalk_1.default.gray(` üß™ –¢–ï–°–¢ ${index + 1}`));
    console.log((0, chalk_1.default)(`–§–æ—Ä–º—É–ª–∞: ${formula}`));
};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const printSuccessResult = (result) => {
    console.log(chalk_1.default.gray('‚úî –†–µ–∑—É–ª—å—Ç–∞—Ç:'));
    console.log(chalk_1.default.bold(`  ${result}`));
};
const printError = (error) => {
    console.log(chalk_1.default.red('‚ùå –û—à–∏–±–∫–∞:'));
    const errorMessage = error instanceof Error
        ? error.message
        : typeof error === 'string'
            ? error
            : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.log(chalk_1.default.redBright(`  ${errorMessage}`));
};
// –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
console.log(chalk_1.default.bold.green('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
//console.log(`–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: ${language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}\n`);
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ forEach
testFormulas.forEach((formula, index) => {
    printTestHeader(index, formula);
    try {
        const result = processFormula(formula, language);
        printSuccessResult(result);
    }
    catch (error) {
        printError(error);
    }
});
// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
printSeparator();
console.log(chalk_1.default.bold.green('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));
// –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
/*console.log('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï');
console.log(`–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: ${language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}\n`);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª—ã
testFormulas.forEach((formula, index) => {
  console.log(`\n${'-'.repeat(60)}`);
  console.log(`–§–û–†–ú–£–õ–ê ${index + 1}: ${formula}`);
  
  try {
    const result = processFormula(formula, language);
    console.log(`\n${result}\n`);
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error instanceof Error ? error.message : error);
  }
});*/ 
