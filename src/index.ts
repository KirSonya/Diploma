// index.ts
import { Tokenizer } from './tokenizer';
import { Parser } from './parser';
import { Translator } from './translator';
import chalk from 'chalk'; // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞

// –ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testFormulas = [
    "–°–ï–ô–ß–ê–° ()",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ì–û–î)",
    "–ò–ó–í–õ–ï–ß–¨ (–°–ï–ô–ß–ê–°(), –ö–í–ê–†–¢–ê–õ)",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –î–ï–ù–¨–ù–ï–î–ï–õ–ò) = 1",
    "–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –î–ï–ù–¨) < –ò–ó–í–õ–ï–ß–¨(–°–ï–ô–ß–ê–°(), –î–ï–ù–¨)",
    "–î–ê–¢–ê(2017, 01, 01)",
    "–ü–µ—Ä–∏–æ–¥ > –î–ê–¢–ê(2017, 01, 01)",
    "–ù–ê–ß–ê–õ–û–ü–ï–†–ò–û–î–ê(–ü–µ—Ä–∏–æ–¥, –ù–ï–î–ï–õ–Ø)",
    "–ü–µ—Ä–∏–æ–¥ = –ù–ê–ß–ê–õ–û–ü–ï–†–ò–û–î–ê(–ü–µ—Ä–∏–æ–¥, –ö–í–ê–†–¢–ê–õ)",
    "–ù–ê–ß–ê–õ–û–ü–ï–†–ò–û–î–ê(–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –ö–í–ê–†–¢–ê–õ)",
    "–ö–û–ù–ï–¶–ü–ï–†–ò–û–î–ê (–î–ê–¢–ê(2017, 01, 01, 4, 12, 34), –°–ï–ö–£–ù–î–ê)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ú–ò–ù–£–¢–ê), 1, 2, 3, 5, 10, 11, 12)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶), 201701, 201702, 201703)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶, –î–ï–ù–¨), 20170101, 20170102)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶, –î–ï–ù–¨, –ß–ê–°), 2017010101, 2017010102)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶, –î–ï–ù–¨, –ß–ê–°, –ú–ò–ù–£–¢–ê), 201701010101, 201701010101)",
    "–í(–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶, –î–ï–ù–¨, –ß–ê–°, –ú–ò–ù–£–¢–ê, –°–ï–ö–£–ù–î–ê), 20170101010101, 20170101010102)",
    "–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ú–ï–°–Ø–¶) = 1 –ò–õ–ò –ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ú–ï–°–Ø–¶) = 3",
    "–ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ì–û–î) = 2017 –ò –ò–ó–í–õ–ï–ß–¨(–ü–µ—Ä–∏–æ–¥, –ú–ï–°–Ø–¶) = 3",
    "–î–û–ë–ê–í–ò–¢–¨(–°–ï–ô–ß–ê–°(), –ß–ê–°, 3)",
    "–î–û–ë–ê–í–ò–¢–¨(–î–ê–¢–ê(2017,11,26,4,30,0), –ß–ê–°, 1)",
    "–ò–ó–í–õ–ï–ß–¨ (–ü–µ—Ä–∏–æ–¥, –ì–û–î, –ú–ï–°–Ø–¶, –î–ï–ù–¨) = 20250101"
]

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞: 'ru' –∏–ª–∏ 'en'
const language: 'ru' | 'en' = 'ru';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã
export function processFormula(formula: string, lang: 'ru' | 'en' = 'ru'): string {
  try {
    // 1. –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
    const tokenizer = new Tokenizer(formula);
    const tokens = tokenizer.tokenize();
    
    // 2. –ü–∞—Ä—Å–∏–Ω–≥
    const parser = new Parser(tokens);
    const ast = parser.parse();
    
    // 3. –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è
    const translator = new Translator(lang);
    return translator.translate(ast);
    
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—É–ª—ã: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
const printSeparator = () => {
  console.log(chalk.gray('‚ïê'.repeat(60)));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞
const printTestHeader = (index: number, formula: string) => {
  printSeparator();
  console.log(chalk.gray(` üß™ –¢–ï–°–¢ ${index + 1}`));
  console.log(chalk(`–§–æ—Ä–º—É–ª–∞: ${formula}`));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const printSuccessResult = (result: string) => {
  console.log(chalk.gray('‚úî –†–µ–∑—É–ª—å—Ç–∞—Ç:'));
  console.log(chalk.bold(`  ${result}`));
};

const printError = (error: unknown) => {
  console.log(chalk.red('‚ùå –û—à–∏–±–∫–∞:'));
  const errorMessage = error instanceof Error 
    ? error.message 
    : typeof error === 'string'
      ? error
      : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  console.log(chalk.redBright(`  ${errorMessage}`));
};

// –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
console.log(chalk.bold.green('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'));
//console.log(`–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: ${language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}\n`);

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ forEach
testFormulas.forEach((formula, index) => {
  printTestHeader(index, formula);
  
  try {
    const result = processFormula(formula, language);
    printSuccessResult(result);
  } catch (error: unknown) {
    printError(error);
  }
});

// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
printSeparator();
console.log(chalk.bold.green('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n'));

// –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
/*console.log('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï');
console.log(`–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: ${language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}\n`);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—É–ª—ã
testFormulas.forEach((formula, index) => {
  console.log(`\n${'-'.repeat(60)}`);
  console.log(`–§–û–†–ú–£–õ–ê ${index + 1}: ${formula}`);
  
  try {
    const result = processFormula(formula, language);
    console.log(`\n${result}\n`);
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error instanceof Error ? error.message : error);
  }
});*/